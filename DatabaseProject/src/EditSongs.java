import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.GroupLayout;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class EditSongs extends javax.swing.JFrame {

    myDBCon dbCon;
    ResultSet rs;
    ResultSet rs1, rs2, rs3;
    int sid;
    /**
     * Creates new form AddEmployee
     */
    public EditSongs() {
        initComponents();
        
        // center form in screen 
        this.setLocationRelativeTo(null);
        
        // set all error labels to invisible
        lblSongError.setVisible(false);
        lblDateError.setVisible(false);
        lblLengthError.setVisible(false);
        try {            
            dbCon = new myDBCon();
            rs1 = dbCon.executeStatement("SELECT Name FROM Artist");
            // populate mgr combo box        
            while (rs1.next()) {
                cmbArtistName.addItem(rs1.getString("name"));
            }
            rs1.close();
        } catch (SQLException e) {
            System.out.println(e);
        }  
        try {            
            dbCon = new myDBCon();
            rs2 = dbCon.executeStatement("SELECT Name FROM Genres");
            while (rs2.next()) {
            	cmbGenre.addItem(rs2.getString("Name"));
            }
            rs2.close();
        } catch (SQLException e) {
            System.out.println(e);
        } 
    
     getNewData();   
    }
    private void getNewData() {
       
            // populate rest of fields
            try {
                rs = dbCon.executeStatement("SELECT * from Songs order by SongId ASC");
				rs.beforeFirst();
	            rs.first();
	            populateFields();


			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
    
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        cmbArtistName = new javax.swing.JComboBox<String>();
        cmbGenre = new JComboBox<String>();
        btnUpdate = new javax.swing.JButton();
        txtLength = new javax.swing.JFormattedTextField();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        lblSongError = new javax.swing.JLabel();
        lblDateError = new javax.swing.JLabel();
        lblLengthError = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Update/Delete Employee");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Edit Songs");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Song Name");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Release Date");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("Length (in seconds)");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel7.setText("Artist Name");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel8.setText("Genre");
        AutoCompletion.enable(cmbArtistName);
        AutoCompletion.enable(cmbGenre);

        txtName.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N

        txtDate.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N
        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtJobActionPerformed(evt);
            }
        });

        cmbArtistName.setFont(new java.awt.Font("Eras Demi ITC", 0, 18)); // NOI18N

        cmbGenre.setFont(new java.awt.Font("Eras Demi ITC", 0, 18));

        btnUpdate.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        txtLength.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("dd-MMM-yyyy"))));
        txtLength.setFont(new java.awt.Font("Eras Demi ITC", 0, 18));

        btnNext.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        lblSongError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblSongError.setForeground(new java.awt.Color(255, 0, 0));
        lblSongError.setText("error label");

        lblDateError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblDateError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateError.setText("error label");

        lblLengthError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblLengthError.setForeground(new java.awt.Color(255, 0, 0));
        lblLengthError.setText("error label");
        
        JLabel currentGenre = new JLabel("Current Genre:");
        currentGenre.setFont(new Font("Tahoma", Font.PLAIN, 14));
        
        JLabel currentArtist = new JLabel("Current Artist:");
        currentArtist.setFont(new Font("Tahoma", Font.PLAIN, 14));
        
        cAr = new JTextField();
        cAr.setEditable(false);
        cAr.setColumns(10);
        
        cGr = new JTextField();
        cGr.setEditable(false);
        cGr.setColumns(10);
        
        JButton btnDelete = new JButton();
        btnDelete.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		deleteSong();
        	}
        });
        btnDelete.setText("Delete");
        btnDelete.setFont(new Font("Forte", Font.PLAIN, 24));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(54)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(jLabel3)
        						.addComponent(jLabel4)
        						.addComponent(jLabel6)
        						.addComponent(jLabel7)
        						.addComponent(jLabel8)))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(27)
        					.addComponent(btnPrevious)))
        			.addGap(110)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(jLabel1)
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(cmbGenre, Alignment.TRAILING, 0, 216, Short.MAX_VALUE)
        						.addComponent(txtLength, 200, 216, Short.MAX_VALUE)
        						.addComponent(txtDate, 200, 216, Short.MAX_VALUE)
        						.addComponent(txtName, GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
        						.addComponent(cmbArtistName, 200, 216, Short.MAX_VALUE))
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        								.addComponent(lblDateError, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        								.addComponent(lblSongError, GroupLayout.PREFERRED_SIZE, 151, GroupLayout.PREFERRED_SIZE))
        							.addGap(27))
        						.addGroup(layout.createSequentialGroup()
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addComponent(currentGenre)
        								.addComponent(currentArtist))
        							.addGap(30))
        						.addComponent(lblLengthError, GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)))
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(btnUpdate)
        					.addPreferredGap(ComponentPlacement.UNRELATED)
        					.addComponent(btnDelete, GroupLayout.PREFERRED_SIZE, 107, GroupLayout.PREFERRED_SIZE)))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(cAr, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(cGr, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnNext))
        			.addGap(84))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel1)
        			.addGap(29)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblSongError)
        				.addComponent(jLabel3)
        				.addComponent(txtName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblDateError)
        				.addComponent(jLabel4)
        				.addComponent(txtDate, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(59)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(cAr, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(currentArtist, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(14)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel6)
        						.addComponent(txtLength, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        						.addComponent(lblLengthError))
        					.addGap(16)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(jLabel7)
        						.addComponent(cmbArtistName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
        			.addGap(11)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel8)
        				.addComponent(cmbGenre, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(currentGenre, GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
        				.addComponent(cGr, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addGap(49)
        					.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        						.addComponent(btnUpdate)
        						.addComponent(btnPrevious)
        						.addComponent(btnNext)))
        				.addGroup(layout.createSequentialGroup()
        					.addGap(48)
        					.addComponent(btnDelete, GroupLayout.PREFERRED_SIZE, 43, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap(46, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        

    private void txtJobActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
    }                                      

    	private void populateFields() {
    		 try {
    		        if (rs.isBeforeFirst()) {
    		            rs.next();  // Move to the first row if the cursor is at the beginning
    		        }
    		        if (rs.isAfterLast()) {
    		            // This should not happen normally, but just in case,
    		            // let's handle the situation and not attempt to read from the ResultSet.
    		            clearAllFields();
    		            return;
    		        }

    		        // Now we're assured we're at a valid row and can safely access the data
    		        sid = rs.getInt("songid");
    		        txtName.setText(rs.getString("sname"));
    		        
    		        Date releaseDate = rs.getDate("releasedate");

    		     // Check if the retrieved date is not null
    		     if (releaseDate != null) {
    		         // Format the date into a custom format (D/M/Y)
    		         SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
    		         String formattedDate = sdf.format(releaseDate);

    		         // Set the formatted date in the text field
    		         txtDate.setText(formattedDate);
    		     } else {
    		         // If the retrieved date is null, set an empty string in the text field
    		         txtDate.setText("");
    		     }
    		        
    		        int length = rs.getInt("Length");
    		        txtLength.setText(String.valueOf(length));
    		        
    		        // Retrieve artist name
    		        int artistId = rs.getInt("artistid");
    		        rs1 = dbCon.executeStatement("SELECT name FROM artist WHERE ArtistID = " + artistId);
    		        if (rs1.next()) {
    		            cAr.setText(rs1.getString("name"));
    		        }
    		        rs1.close(); // Close the ResultSet after use

    		        // Retrieve genre name
    		        int genreId = rs.getInt("genreid");
    		        rs2 = dbCon.executeStatement("SELECT name FROM genres WHERE GenreID = " + genreId);
    		        if (rs2.next()) {
    		            cGr.setText(rs2.getString("name"));
    		        }
    		        rs2.close(); // Close the ResultSet after use

    		        EnableDisableButtons();

    		    } catch (SQLException ex) {
    		        Logger.getLogger(EditSongs.class.getName()).log(Level.SEVERE, null, ex);
    		        clearAllFields();
    		    }    	}

    

    private void MoveNext() {
    	   try {
    	        if (!rs.isLast()) {
    	            if (rs.next()) {
    	                populateFields();
    	                btnPrevious.setEnabled(true); // Enable the 'Previous' button if we move next
    	            }
    	        }
    	        // If already at the last row, maybe disable the 'Next' button
    	        btnNext.setEnabled(!rs.isLast());
    	    } catch (SQLException ex) {
    	        Logger.getLogger(EditSongs.class.getName()).log(Level.SEVERE, null, ex);
    	        btnNext.setEnabled(false);
    	    }
    }
    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {                                        
        MoveNext();
    }                                       

    
    private void deleteSong() {
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to delete this song?", "Delete Song", 
            JOptionPane.YES_NO_OPTION);

        // Confirm before deleting
        if (confirm == JOptionPane.YES_OPTION) {
        	try {
                // Prepare the delete SQL statement
                String prepSQL = "DELETE FROM Songs WHERE SongID = ?";
                PreparedStatement delStmt = dbCon.prepareStatement(prepSQL);
                delStmt.setInt(1, sid);

                // Execute the delete statement
                int result = delStmt.executeUpdate();
                if (result > 0) {
                    JOptionPane.showMessageDialog(this, "Song deleted successfully.", "Deleted", JOptionPane.INFORMATION_MESSAGE);

                    // Check if the deleted song was the last in the result set
                    if (!rs.isLast()) {
                        // If it was not the last song, just move to the next one
                        MoveNext();
                    } else {
                        // It was the last song, so we should move to the previous one if possible
                        if (!rs.isFirst()) {
                            MovePrevious();
                        } else {
                            // If it was both the first and last song, clear all fields
                            clearAllFields();
                        }
                    }
                    // Refresh data from the database
                    getNewData();
                }else {
                    JOptionPane.showMessageDialog(this, "Song could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);
                }
               
                 } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, "Error while deleting song. " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                Logger.getLogger(EditSongs.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    
    
    
    
    private void clearAllFields() {
		txtDate.setText("");
		txtName.setText("");
		txtLength.setText("");
		 cmbGenre.setSelectedIndex(0);
	     cmbArtistName.setSelectedIndex(0);
	     cAr.setText("");
	     cGr.setText("");
		
		
	}
	private void MovePrevious() {
	    try {
	        if (!rs.isFirst()) {
	            if (rs.previous()) {
	                populateFields();
	                btnNext.setEnabled(true); // Enable the 'Next' button if we move previous
	            }
	        }
	        // If already at the first row, maybe disable the 'Previous' button
	        btnPrevious.setEnabled(!rs.isFirst());
	    } catch (SQLException ex) {
	        Logger.getLogger(EditSongs.class.getName()).log(Level.SEVERE, null, ex);
	        btnPrevious.setEnabled(false);
	    }
    }

    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(EditSongs.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        MovePrevious();
    }                                           

    void clearErrorLabels() {
        lblSongError.setText("");
        lblSongError.setVisible(false);
        lblDateError.setText("");
        lblDateError.setVisible(false);
        lblLengthError.setText("");
        lblLengthError.setVisible(false);
        
      
    }

    public boolean isInteger(String s) {
        try {
            Integer.parseInt(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    public boolean isDouble(String s) {
        try {
            Double.parseDouble(s);
            return true;
        } catch (NumberFormatException ex) {
            return false;
        }
    }

    boolean isValidData() {
        clearErrorLabels();
        boolean result = true;
        
        if (txtName.getText().isEmpty()) {          
           lblSongError.setText("Please enter the name of the Song.");       
            lblSongError.setVisible(true);
            return false;
        }
        //date text fields
        if (txtDate.getText().trim().isEmpty()) {          
            lblDateError.setText("Please enter the release date of the Song.");       
           lblDateError.setVisible(true);
             return false;
             }
       
        if (txtLength.getText().trim().isEmpty()) {          
            lblLengthError.setText("Please enter the length of the song in seconds.");       
            lblLengthError.setVisible(true);
             return false;
         } 
        
        try { Double.parseDouble(txtLength.getText().trim());   }
        catch (NumberFormatException e) {
        	lblLengthError.setText("Please enter a numerical value here.");       
            lblLengthError.setVisible(true);
        	return false;  
        }    
        return result;    
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    	  // TODO add your handling code here:
        try {                  
            // verify input data//   
            if ( isValidData()) {
                
                String SName = txtName.getText();

                //get ArtistID of selected artist name from combo box
                int AID = getArtistId(cmbArtistName.getSelectedItem().toString());
          
                //get GenreID
                int GID = getGenreId(cmbGenre.getSelectedItem().toString());
                
              
                // Convert length into double
                double length = Double.parseDouble(txtLength.getText().trim());
                
                // Convert release date into Date
                java.sql.Date releaseDate = convertToDate(txtDate.getText().trim());
            	
                //update songs table
                String prepSQL = "UPDATE songs SET SName = '" + SName + "', ReleaseDate = TO_DATE('" + 
                        releaseDate.toString() + "', 'YYYY-MM-DD'), Length = " + length + 
                        ", ArtistID = " + AID + ", GenreID = " + GID + 
                        " WHERE SongID = " + sid;


                
                int result = dbCon.executePrepared(prepSQL);         
                if (result > 0) {
                    JOptionPane.showMessageDialog(null, "Song updated successfully.", "SUCCESS", JOptionPane.INFORMATION_MESSAGE);
                    getNewData();   
                }           
            } else {
                JOptionPane.showMessageDialog(null, "Please fix validation errors or song already exists.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException | ParseException e) {
            JOptionPane.showMessageDialog(null, "Database error adding new song. Please contact the administrator if this continues");
            e.printStackTrace();
        } 
        
        
    }
    
  
    private int getArtistId(String artistName) throws SQLException {
        String sql = "SELECT ArtistID FROM Artist WHERE Name = ?";
        PreparedStatement pst = dbCon.prepareStatement(sql);
        pst.setString(1, artistName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            return rs.getInt("ArtistID");
        }
        return -1; // or throw an exception if the artist must exist
    }


    private int getGenreId(String genreName) throws SQLException {
        String sql = "SELECT GenreID FROM Genres WHERE Name = ?";
        PreparedStatement pst = dbCon.prepareStatement(sql);
        pst.setString(1, genreName);
        ResultSet rs = pst.executeQuery();
        if (rs.next()) {
            return rs.getInt("GenreID");
        }
        return -1; // or throw an exception if the genre must exist
    }
    
    private java.sql.Date convertToDate(String dateString) throws ParseException {
        SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyy");
        java.util.Date parsedDate = format.parse(dateString);
        return new java.sql.Date(parsedDate.getTime());
    }

    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<String> cmbArtistName;
    private javax.swing.JFormattedTextField txtLength;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel lblSongError;
    private javax.swing.JLabel lblDateError;
    private javax.swing.JLabel lblLengthError;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtDate;
    private JComboBox<String> cmbGenre;
    private JTextField cAr;
    private JTextField cGr;	
}