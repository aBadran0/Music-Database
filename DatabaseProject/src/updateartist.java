/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.util.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.SwingConstants;
import java.awt.Component;
import javax.swing.JComboBox;
/**
 *
 * @author mihir
 */
public class updateartist extends javax.swing.JFrame {

    /**
     * Creates new form AddNewDept
     */
    myDBCon dbCon;
    ResultSet rs, rs2;
    double aid = 0;
    public updateartist() {
        initComponents();
        this.setLocationRelativeTo(null);
        lblAgeError.setVisible(false);
        lblNameError.setVisible(false);
        dbCon = new myDBCon();
        this.getNewData();
        
        // populate the user type combo box
        // populate the user type combo box
        cmbUserType.addItem("M");      
        cmbUserType.addItem("F");  
    }
    private void getNewData() {

        try {
        
            // populate fields
            rs = dbCon.executeStatement("SELECT * FROM Artist");         
            rs.beforeFirst();
            rs.first();
            populateFields();
        }        
            catch (SQLException e) {
            javax.swing.JLabel label = new javax.swing.JLabel("SQL Error - Display selected artist.");
            label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
            JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        }
    private void populateFields() {
        try {
        	aid = rs.getInt("artistid");
            txtAge.setText(rs.getString("age"));
            txtName.setText(rs.getString("name"));
            EnableDisableButtons();
        } catch (SQLException ex) {
            Logger.getLogger(updateartist.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void MoveNext() {
        try {
            // TODO add your handling code here:
            if (!rs.isLast()) {
                rs.next();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(updateartist.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void MovePrevious() {
        try {
            // TODO add your handling code here:
            if (!rs.isFirst()) {
                rs.previous();
                populateFields();
            }
        } catch (SQLException ex) {
            Logger.getLogger(updateartist.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void EnableDisableButtons() {
        try {
            if (rs.isFirst()) {
                btnPrevious.setEnabled(false);
            } else {
                btnPrevious.setEnabled(true);
            }
            if (rs.isLast()) {
                btnNext.setEnabled(false);
            } else {
                btnNext.setEnabled(true);
            }
        } catch (SQLException ex) {
            Logger.getLogger(updateartist.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        lblage = new javax.swing.JLabel();
        txtAge = new javax.swing.JTextField();
        lblNameError = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lblAgeError = new javax.swing.JLabel();
        lblSex = new javax.swing.JLabel();
        cmbUserType = new JComboBox<String>();
        btnNext = new javax.swing.JButton();
        btnPrevious = new javax.swing.JButton();
        btnUpdateUser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setText("Modify Artist");

        lblage.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblage.setText("Age");

        txtAge.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtAge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoActionPerformed(evt);
            }
        });

        lblNameError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblNameError.setForeground(new java.awt.Color(255, 0, 0));
        lblNameError.setText("error label");

        lblName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblName.setText("Artist");

        txtName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        lblAgeError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblAgeError.setForeground(new java.awt.Color(255, 0, 0));
        lblAgeError.setText("error label");

        lblSex.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSex.setText("Sex");

        cmbUserType.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        btnNext.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnNext.setText("Next >>");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        btnPrevious.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnPrevious.setText("<< Previous");
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });

        btnUpdateUser.setFont(new java.awt.Font("Forte", 0, 24)); // NOI18N
        btnUpdateUser.setText("Update");
        btnUpdateUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.TRAILING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap(107, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(lblage, Alignment.TRAILING)
        				.addComponent(lblName, Alignment.TRAILING)
        				.addComponent(lblSex, Alignment.TRAILING))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.CENTER)
        				.addComponent(cmbUserType, GroupLayout.PREFERRED_SIZE, 221, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtAge, GroupLayout.PREFERRED_SIZE, 221, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtName, GroupLayout.PREFERRED_SIZE, 221, GroupLayout.PREFERRED_SIZE))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(lblNameError, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblAgeError, GroupLayout.PREFERRED_SIZE, 93, GroupLayout.PREFERRED_SIZE))
        			.addGap(23))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(24)
        			.addComponent(btnPrevious)
        			.addGap(21)
        			.addComponent(btnUpdateUser)
        			.addGap(18)
        			.addComponent(btnNext)
        			.addContainerGap(86, Short.MAX_VALUE))
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap(153, Short.MAX_VALUE)
        			.addComponent(jLabel1)
        			.addGap(140))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jLabel1)
        			.addGap(20)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblName, GroupLayout.PREFERRED_SIZE, 28, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtName, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblNameError))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(lblAgeError)
        				.addComponent(txtAge, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblage))
        			.addGap(18)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(cmbUserType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblSex))
        			.addGap(25)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnPrevious)
        				.addComponent(btnNext)
        				.addComponent(btnUpdateUser))
        			.addContainerGap(15, Short.MAX_VALUE))
        );
        layout.linkSize(SwingConstants.VERTICAL, new Component[] {lblage, txtAge, lblNameError});
        layout.linkSize(SwingConstants.HORIZONTAL, new Component[] {txtAge, txtName, cmbUserType});
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
        MoveNext();
    }                                       

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
        MovePrevious();
    }                                           
   void clearErrorLabels(){
       lblAgeError.setText("");
       lblAgeError.setVisible(false);
       lblNameError.setText("");
       lblNameError.setVisible(false);
       
   }
   
    boolean isValidData(){
        clearErrorLabels();
        boolean result = true;
        if (txtName.getText().isEmpty() || (txtName.getText().length() > 50)) {
            if (txtName.getText().isEmpty()) {
            	lblNameError.setText("Invalid. Artist Name be empty.");
            } else if (txtName.getText().length() > 50) {
            	lblNameError.setText("Invalid. Artist name must be shorter than 50 characters.");
            }
            lblNameError.setVisible(true);
            result = false;
        	}
        
          if (txtAge.getText().trim().isEmpty()) {
                lblAgeError.setText("Invalid. Cannot be empty.");          
                lblAgeError.setVisible(true);
                result = false;
          		} 
          try { Double.parseDouble(txtAge.getText().trim());   }
          catch (NumberFormatException e) {
          	lblAgeError.setText("Please enter a numerical value here.");       
          	lblAgeError.setVisible(true);
          	return false;  
          }
        return result;    
        
    }
    private void btnUpdateUserActionPerformed(java.awt.event.ActionEvent evt) {                                              
        try {
            // make the result set scrolable forward/backward updatable
//            statement = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE);

            if (isValidData()) {
                int confirm = JOptionPane.showConfirmDialog(null, "Are you sure you want to continue", "Confirm Operation", JOptionPane.YES_NO_OPTION);

                if (confirm == JOptionPane.NO_OPTION) {
                    return;
                }
                
                boolean isduplicate = false;
                String namechk = txtName.getText();
                String dupecheck = "SELECT name FROM Artist where name = '" + namechk +"'";
                
                rs2 = dbCon.executeStatement(dupecheck);
                // isBeforeFirst() returns false if there are no data in the resultset
                isduplicate = rs2.isBeforeFirst();   
                
                if (isduplicate == false)
                	
                { 
                String prepSQL1 = "UPDATE arist SET name = "
                        + "'" + txtName.getText()
                        + "', age = " + txtAge.getText().trim()    
                        +", sex = '"+ cmbUserType.getSelectedItem()
                        + "' WHERE artistid = '" + aid +"'"  ;
                int result1 = dbCon.executePrepared(prepSQL1);
                          
                
                if (result1 > 0){
                    javax.swing.JLabel label = new javax.swing.JLabel("Dept " + txtName.getText() + " updated successfully.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "SUCCESS", JOptionPane.INFORMATION_MESSAGE);

                    getNewData();
                }
                }
                else {
                    javax.swing.JLabel label = new javax.swing.JLabel("Genre already exists.");
                    label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                    JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.INFORMATION_MESSAGE);
                   
                	}
                               
                
                
            } else {
                javax.swing.JLabel label = new javax.swing.JLabel("Please fix validation errors...");
                label.setFont(new java.awt.Font("Arial", java.awt.Font.BOLD, 18));
                JOptionPane.showMessageDialog(null, label, "ERROR", JOptionPane.ERROR_MESSAGE);

            }

        } catch (SQLException e) {

            JOptionPane.showMessageDialog(null, "Error updating artist." + e.getMessage());

        }
    }                                             

    private void txtNoActionPerformed(java.awt.event.ActionEvent evt) {                                      
        // TODO add your handling code here:
    }                                     

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {                                        
        // TODO add your handling code here:
    }                                       
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnUpdateUser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblSex;
    private javax.swing.JLabel lblage;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblAgeError;
    private javax.swing.JLabel lblNameError;
    private JComboBox<String> cmbUserType;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtAge;
    // End of variables declaration                   
}
