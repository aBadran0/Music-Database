

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import javax.swing.JOptionPane;

import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

import com.toedter.calendar.JDateChooser;

import javax.swing.GroupLayout;
import javax.swing.JLabel;
import java.awt.Font;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;


public class ModifyUser extends javax.swing.JFrame {
    /**
     * Creates new form AddEmployee
     */
    myDBCon dbCon;
    ResultSet rs;
    ResultSet rs1;
    ResultSet rs2;
    ResultSet rs3;
    
    public ModifyUser() {
        initComponents();     
        // center form in screen 
        this.setLocationRelativeTo(null);
   
        // set all error labels to invisible
       
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        heading = new javax.swing.JLabel();
        RDate = new javax.swing.JLabel();
        Length = new javax.swing.JLabel();
        SName = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        txtUserID = new javax.swing.JTextField();
        btnModifyUser = new javax.swing.JButton();
        lblDateError = new javax.swing.JLabel();
        lblLengthError = new javax.swing.JLabel();
        lblSongError = new javax.swing.JLabel();
        txtUserType = new JTextField();
        
        JDateChooser dateChooser = new JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add New Login User");
        setResizable(false);

        heading.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        heading.setText("Delete / modify user");

        RDate.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        RDate.setText("Username");

        Length.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        Length.setText("User Type");

        SName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        SName.setText("User ID");

        txtUsername.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        txtUserID.setFont(new java.awt.Font("Tahoma", 0, 18));
 

        btnModifyUser.setFont(new Font("Franklin Gothic Heavy", Font.PLAIN, 24)); // NOI18N
        btnModifyUser.setText("Modify User");
        btnModifyUser.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                // Retrieve input values
                String userID = txtUserID.getText().trim();
                String newUsername = txtUsername.getText().trim();
                String newUserType = txtUserType.getText().trim();

                // Validate the inputs
                if (newUsername.isEmpty()) {
                    lblDateError.setText("Username cannot be empty.");
                    lblDateError.setVisible(true);
                    return;
                }
                if (newUserType.isEmpty() || (!newUserType.equals("0") && !newUserType.equals("1"))) {
                    lblLengthError.setText("User Type must be 0 or 1.");
                    lblLengthError.setVisible(true);
                    return;
                }
                
                

                // Initialize database connection
                myDBCon dbCon = new myDBCon();

                try {
                    // Prepare the SQL statement to update user
                    String strSQL = "UPDATE Users SET Username = ?, userType = ? WHERE Username = ?";
                    PreparedStatement prepStatement = dbCon.prepareStatement(strSQL);

                    // Set the parameters for the prepared statement
                    prepStatement.setString(1, newUsername);
                    prepStatement.setInt(2, Integer.parseInt(newUserType));
                    prepStatement.setString(3, userID);

                    // Execute the update statement
                    int rowCount = prepStatement.executeUpdate();

                    if (rowCount > 0) {
                        JOptionPane.showMessageDialog(null, "User updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        // Optionally, clear the text fields and reset status messages
                        clearInputBoxes();
                        clearErrorLabels();
                    } else {
                        // If no rows affected, it means the user ID was not found
                        JOptionPane.showMessageDialog(null, "User ID not found or no new information to update.", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (SQLException sqle) {
                    // Handle any SQL errors
                    JOptionPane.showMessageDialog(null, "SQL Error: " + sqle.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    // Try to close the prepared statement and the connection
                    try {
                        if (dbCon.prepStatement != null) dbCon.prepStatement.close();
                        if (dbCon.con != null) dbCon.con.close();
                    } catch (SQLException se) {
                        se.printStackTrace();
                    }
                }
            }
        });

        lblDateError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblDateError.setForeground(new java.awt.Color(255, 0, 0));
        lblDateError.setText("error label");

        lblLengthError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblLengthError.setForeground(new java.awt.Color(255, 0, 0));
        lblLengthError.setText("error label");

        lblSongError.setFont(new java.awt.Font("Tahoma", 2, 18)); // NOI18N
        lblSongError.setForeground(new java.awt.Color(255, 0, 0));
        lblSongError.setText("error label");

        txtUserType.setFont(new java.awt.Font("Tahoma", 1, 18));
        
        JButton btnDeleteUser = new JButton();
        btnDeleteUser.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
            	
            	myDBCon dbCon = new myDBCon();
            	
                // Get the UserID from the text field
                String userID = txtUserID.getText().trim();
                
                // Check if the UserID field is empty
                if (userID.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "User ID cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Assume 'adminUserID' holds the current admin's user ID
                String adminUserID = "10"; // You need to set this from the session or context of the logged-in user

                // Check if the admin is trying to delete their own account
                if (userID.equals(adminUserID)) {
                    JOptionPane.showMessageDialog(null, "You cannot delete your own admin account.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                // Initialize database connection
                
                
                try {
                    
                    // Check if the UserID is for an admin
                    String checkAdminSQL = "SELECT UserType FROM Users WHERE UserID = ?";
                    PreparedStatement checkStmt = dbCon.prepareStatement(checkAdminSQL);
                    checkStmt.setString(1, userID);
                    ResultSet rs = checkStmt.executeQuery();

                    if (rs.next()) {
                        String userType = rs.getString("UserType");
                        if ("admin".equalsIgnoreCase(userType)) {
                            JOptionPane.showMessageDialog(null, "You cannot delete another admin account.", "Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "User ID not found.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // Confirm deletion
                    int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this user?", "Warning", JOptionPane.YES_NO_OPTION);
                    if (dialogResult == JOptionPane.NO_OPTION) {
                        return; // User canceled the operation
                    }
                    
            
                    // Prepare the DELETE statement
                    String strSQL = "DELETE FROM Users WHERE UserID = ?";
                    PreparedStatement prepStatement = dbCon.prepareStatement(strSQL);
                    prepStatement.setString(1, userID);
                    
                    // Execute the delete statement
                    int rowCount = prepStatement.executeUpdate();
                    
                    if (rowCount > 0) {
                        JOptionPane.showMessageDialog(null, "User deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                        // Clear the text fields and reset any status messages
                        clearInputBoxes();
                        clearErrorLabels();
                    } else {
                        // If no rows affected, it means the user ID was not found
                        JOptionPane.showMessageDialog(null, "User ID not found or could not be deleted.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    testFunction();
                   

                    
                    
                } catch (SQLException sqle) {
                    // Handle any SQL errors
                    JOptionPane.showMessageDialog(null, "SQL Error: " + sqle.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                } finally {
                    // Try to close all database resources
                    try {
                        if (dbCon.prepStatement != null) dbCon.prepStatement.close();
                        if (dbCon.rs != null) dbCon.rs.close();
                        if (dbCon.con != null) dbCon.con.close();
                    } catch (SQLException se) {
                        se.printStackTrace();
                    }
                    
          
                }
            }
                     
        
        }
        );
        



        btnDeleteUser.setText("Delete User");
        btnDeleteUser.setFont(new Font("Franklin Gothic Heavy", Font.PLAIN, 24));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(103)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(RDate)
        				.addComponent(SName)
        				.addComponent(Length))
        			.addGap(83)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(txtUserID, GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE)
        				.addComponent(txtUsername, 200, 345, Short.MAX_VALUE)
        				.addComponent(txtUserType, 200, 345, Short.MAX_VALUE))
        			.addGap(15)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING, false)
        				.addComponent(lblLengthError, GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
        				.addComponent(lblSongError, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(lblDateError, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        			.addGap(96))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(234)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(heading)
        				.addGroup(layout.createSequentialGroup()
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(btnDeleteUser, GroupLayout.PREFERRED_SIZE, 182, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(btnModifyUser, GroupLayout.PREFERRED_SIZE, 174, GroupLayout.PREFERRED_SIZE)))
        			.addContainerGap(448, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(heading)
        			.addGap(24)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(txtUserID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblSongError)
        				.addComponent(SName))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(txtUsername, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblDateError)
        				.addComponent(RDate))
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(txtUserType, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(lblLengthError)
        				.addComponent(Length))
        			.addGap(128)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnModifyUser)
        				.addComponent(btnDeleteUser, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE))
        			.addContainerGap())
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>                        

    void clearErrorLabels() {
        // erase error label text and set visibility to false 
        lblDateError.setText("");
        lblDateError.setVisible(false);
        lblLengthError.setText("");
        lblLengthError.setVisible(false);
     
        lblSongError.setText("");
        lblSongError.setVisible(false);   
    }
  

    void clearInputBoxes() {
        // clear all text boxes and set the user type combo to the default value //
        txtUserID.setText("");
        txtUsername.setText("");
        txtUserType.setText("");
    }
    
    void testFunction()
    {
    	
    	 String userID = txtUserID.getText().trim();
    	 dbCon = new myDBCon();
         String prepSQL1 = "INSERT INTO MODIFICATIONS(UserID, TimeStamp, Action, TableAltered) VALUES (?, ?, ?, ?)";
       
         PreparedStatement insertStmt1;
		try {
			 insertStmt1 = dbCon.prepareStatement(prepSQL1);
			  insertStmt1.setString(1, userID);
		      // Assuming userID is a String

		         // Get the current time and set it as a Timestamp
		         java.sql.Timestamp currentTimestamp = new java.sql.Timestamp(new java.util.Date().getTime());
		         insertStmt1.setString(2, currentTimestamp.toString()); // Set the current timestamp
		         insertStmt1.setString(3, "D"); // Assuming "D" stands for "Delete" action
		         insertStmt1.setString(4, "Users"); // The name of the table altered
		       

		         insertStmt1.executeUpdate(); // Execute the insert operation
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
         System.out.println("1");
       

    }
    
    
   

                                             

                                    


    // Variables declaration - do not modify                     
    private javax.swing.JButton btnModifyUser;
    private javax.swing.JLabel heading;
    private javax.swing.JLabel RDate;
    private javax.swing.JLabel Length;
    private javax.swing.JLabel SName;
    private javax.swing.JLabel lblSongError;
    private javax.swing.JLabel lblLengthError;
    private javax.swing.JLabel lblDateError;
    private javax.swing.JTextField txtUserID;
    private JTextField txtUserType;
    private javax.swing.JTextField txtUsername;
}

	

